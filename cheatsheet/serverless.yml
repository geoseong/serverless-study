service: wild-rides-serverless-demo # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-northeast-2
  stage: dev

custom:
  bucketName: gudi-serverless-geoseong

functions:
  RequestUnicorn:
    handler: handler.handler
    role: WildRydesLambdaRole
    events:
      - http:
          path: ride
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: WildRydesApiGatewayAuthorizer

# you can add CloudFormation resource templates here
resources:
  Resources:
    GudiSlsStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
    GudiSlsStoragePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.bucketName}
        PolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource:
                - 'arn:aws:s3:::${self:custom.bucketName}/*'
    GudiSlsUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: GudiSls
        AutoVerifiedAttributes: ['email']
    GudiSlsUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: GudiSlsWebApp
        GenerateSecret: false
        UserPoolId:
          Ref: 'GudiSlsUserPool'
    WildRydesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Rides
        AttributeDefinitions:
          - AttributeName: RideId
            AttributeType: S
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    WildRydesLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WildRydesLambda
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoDBWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]
    WildRydesApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: WildRydes
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [GudiSlsUserPool, Arn]
        IdentitySource: method.request.header.Authorization
  Outputs:
    What:
      Description: "Hello"
      Value: "Nice to meet you"
    GudiSlsStorageURL:
      Description: "Gudi Serverless Framework Handson URL"
      Value:
        "Fn::GetAtt": [ GudiSlsStorage, WebsiteURL ]
    GudiSlsUserPoolId:
      Description: 'Wild Rydes Cognito User Pool ID'
      Value:
        Ref: 'GudiSlsUserPool'
    GudiSlsUserPoolClientId:
      Description: 'Wild Rydes Cognito User Pool Client ID'
      Value:
        Ref: 'GudiSlsUserPoolClient'
    WildRydesDynamoDbARN:
      Description: 'Wild Rydes DynamoDB ARN'
      Value:
        'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]

